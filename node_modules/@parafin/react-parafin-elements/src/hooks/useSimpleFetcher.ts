import { useState, useEffect } from 'react'


type FetchMetadata<T> = {
  state: 'loading' | 'error' | 'ready'
  value: T | undefined
  error: any
}

type FetchConfig = {
  timeout: number
}

const useSimpleFetcher = <T>(
  fn: () => Promise<T>,
  config?: Partial<FetchConfig>,
) => {
  const [state, set] = useState<FetchMetadata<T>>({
    state: 'loading',
    value: undefined,
    error: undefined,
  })

  useEffect(() => {
    const execute = async () => {
      try {
        const res = await fn()
        set(state => state.state !== 'loading' ? state : {
          state: 'ready',
          value: res,
          error: undefined,
        })
      } catch (err: any) {
        set(state => state.state !== 'loading' ? state : {
          state: 'error',
          value: undefined,
          error: err?.message ?? 'Unknown error',
        })
      }
    }

    execute()

    if (config?.timeout) {
      const t = setTimeout(() => {
        set(state => state.state !== 'loading' ? state : {
          state: 'error',
          value: undefined,
          error: 'Timeout',
        })
      }, config.timeout)

      return () => { clearTimeout(t) }
    }

  }, [fn, config?.timeout])

  return state
}

export default useSimpleFetcher
