import React, { useCallback, useEffect, useContext, createContext } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { LoadingState, ErrorState } from 'layers/states'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { extractUserId } from 'layers/token/utils'
import useSimpleFetcher from 'hooks/useSimpleFetcher'


type TokenLayerContext = {
  token: string
  userId: string
}

const Context = createContext<TokenLayerContext | undefined>(undefined)


type Children = { children: React.ReactNode }

const Token = ({ children }: Children) => {
  const { getToken, environment, overrides } = useEntryLayerContext()
  const { report, track } = useAnalyticsLayerContext()

  const fetchToken = useCallback(async () => {
    const start = +(new Date())
    const res = await getToken()
    track('Completed token fetch', { elapsed: `${+(new Date()) - start}ms` })
    return res
  }, [getToken, track])

  const timeout = overrides.__TOKEN__?.timeout ?? 45000
  const tokenQuery = useSimpleFetcher(fetchToken, { timeout })
  const userId = tokenQuery.value ? extractUserId(tokenQuery.value, environment) : undefined

  useEffect(() => {
    if (userId === null) {
      report('[Token] Unable to parse response', { token: tokenQuery.value })
    }
  }, [userId, report, tokenQuery.value])

  switch (tokenQuery.state) {
    case 'loading':
      return <LoadingState />
    case 'ready':
      if (!tokenQuery.value) {
        report('[Token] Invalid response', { token: tokenQuery.value })
        return <ErrorState />
      } else {
        return (
          <Context.Provider value={{ token: tokenQuery.value, userId: userId ?? '' }}>
            {children}
          </Context.Provider>
        )
      }
    case 'error':
      report(`[Token] Error during fetch - ${tokenQuery.error ?? 'Unknown error'}`)
      return <ErrorState />
    default:
      report('[Token] Unexpected query state', { value: tokenQuery.state })
      return <ErrorState />
  }
}


export const useTokenLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Token)')
  }

  return context
}

export default Token
