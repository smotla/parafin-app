import React, { useState, useEffect } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { useProductLayerContext } from 'layers/product'
import { useMessageLayerContext } from 'layers/messages/provider'

type Children = { children: React.ReactNode }
const PreviewConfigMessages = ({ children }: Children) => {
  const { previewConfig } = useEntryLayerContext()
  const { widgetURL } = useProductLayerContext()
  const { widgetRef } = useMessageLayerContext()
  const [updatePreviewTimestamp, setUpdatePreviewTimestamp] = useState<
    number | undefined
  >(undefined)

  useEffect(() => {
    const handlePing = ({ data }: MessageEvent) => {
      if (data.message === 'ping') setUpdatePreviewTimestamp(Date.now())
    }

    if (previewConfig) window.addEventListener('message', handlePing)
    return () => window.removeEventListener('message', handlePing)
  }, [])

  useEffect(() => {
    if (previewConfig && widgetRef.current?.contentWindow) {
      widgetRef.current.contentWindow.postMessage(
        { message: 'preview-config', previewConfig },
        widgetURL
      )
    }
  }, [previewConfig, widgetRef, widgetURL, updatePreviewTimestamp])

  return <>{children}</>
}

export default PreviewConfigMessages
