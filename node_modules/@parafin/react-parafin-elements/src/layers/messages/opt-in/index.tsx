import React, { useEffect } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { useProductLayerContext } from 'layers/product'
import { useCommsLayerContext } from 'layers/comms'
import { useMessageLayerContext } from 'layers/messages/provider'


type Children = { children: React.ReactNode }
const OptInMessages = ({ children }: Children) => {
  const { handleOptIn, onOptIn } = useEntryLayerContext()
  const { report, track } = useAnalyticsLayerContext()
  const { widgetURL } = useProductLayerContext()
  const { registerMessageHandler, deregisterMessageHandler } = useCommsLayerContext()
  const { widgetRef } = useMessageLayerContext()

  useEffect(() => {
    registerMessageHandler(
      { origin: widgetURL, message: 'opt-in' },
      async (data: any) => {
        try {
          if (!handleOptIn && !onOptIn) {
            throw new Error('No opt in callback provided')
          }

          const start = +new Date()
          const details = handleOptIn
            ? await handleOptIn()
            : onOptIn && data.externalId
            ? await onOptIn(data.externalId)
            : null

          track('Completed opt-in fetch', {
            elapsed: `${+new Date() - start}ms`
          })

          if (details) {
            widgetRef!.current!.contentWindow!.postMessage(
              { message: 'opt-in', business: details },
              widgetURL
            )
          } else {
            report('[Opt-in] Invalid response', { details })
          }
        } catch (err: any) {
          report(`[Opt-in] ${err?.message ?? 'Unknown error'}`)
        }
        // TODO: Encode error handling into opt-in response protocol (instead of not responding)
      }
    )

    return () => {
      deregisterMessageHandler({
        origin: widgetURL,
        message: 'opt-in'
      })
    }
  }, [
    registerMessageHandler,
    deregisterMessageHandler,
    widgetURL,
    handleOptIn,
    onOptIn,
    widgetRef,
    report,
    track
  ])


  return (
    <>
      {children}
    </>
  )
}

export default OptInMessages
