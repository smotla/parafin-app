import React, { useState, useEffect } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { useStatesLayerContext, LoadingState, ErrorState } from 'layers/states'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { useProductLayerContext } from 'layers/product'
import { useCommsLayerContext } from 'layers/comms'


type PingState = 'loading' | 'error' | 'ready'
type Children = { children: React.ReactNode }
const PingMessages = ({ children }: Children) => {
  const { overrides } = useEntryLayerContext()
  const { setState } = useStatesLayerContext()
  const { report, track } = useAnalyticsLayerContext()
  const { widgetURL } = useProductLayerContext()
  const { registerMessageHandler, deregisterMessageHandler } = useCommsLayerContext()

  // TODO: Remove redundancy
  const [pingState, setPingState] = useState<PingState>('loading')

  useEffect(() => {
    const start = +new Date()
    registerMessageHandler(
      { origin: widgetURL, message: 'ping' },
      (data: any) => {
        track('Received PING message', {
          elapsed: `${+new Date() - start}`,
          instance: data?.metadata ?? 'First ping'
        })
        setPingState((s) => (s === 'loading' ? 'ready' : s))
      }
    )

    return () => {
      deregisterMessageHandler({
        origin: widgetURL,
        message: 'ping'
      })
    }
  }, [
    registerMessageHandler,
    deregisterMessageHandler,
    widgetURL,
    track
  ])

  useEffect(() => {
    const t = setTimeout(() => {
      setPingState(s => s === 'loading' ? 'error' : s)
    }, overrides.__PING__?.timeout ?? 40000)

    return () => { clearTimeout(t) }
  }, [overrides])


  useEffect(() => {
    if (pingState === 'error') {
      report('[Messages] Failed to PING widget', { widgetURL })
    } else if (pingState === 'ready') {
      setState('ready')
    }
  }, [pingState, report, widgetURL, setState])


  return (
    <div>
      <div style={{display: pingState === 'ready' ? 'none' : 'block'}}>
        {pingState === 'loading' && <LoadingState />}
        {pingState === 'error' && <ErrorState />}
      </div>

      <div style={{display: pingState === 'ready' ? 'block' : 'none'}}>
        {children}
      </div>
    </div>
  )
}

export default PingMessages
