import React, { useState, useCallback, useMemo, useContext, createContext } from 'react'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { useTokenLayerContext } from 'layers/token'
import { useProductLayerContext } from 'layers/product'
import { encode, getDashboardStyle } from 'layers/dashboard/utils'
import { useEntryLayerContext } from 'layers/entry'


export type CoordinationState = {
  isVisible: boolean
  route: string | null
  dashboardState: any
  widgetState: any
  widgetKey: number
}

type DashboardLayerContext = {
  openDashboard: (route: string | null, state: any) => void
  closeDashboard: (state: any) => void
  widgetState: any
  widgetKey: number
}

const Context = createContext<DashboardLayerContext | undefined>(undefined)

type Children = { children: React.ReactNode }
const Dashboard = ({ children }: Children) => {
  const { track } = useAnalyticsLayerContext()
  const { token } = useTokenLayerContext()
  const { dashboardURL, productSlug, productName } = useProductLayerContext()
  const { productOverride } = useEntryLayerContext()

  const [coordinationState, setCoordinationState] = useState<CoordinationState>({
    isVisible: false,
    route: null,
    dashboardState: null,
    widgetState: null,
    widgetKey: 1,
  })

  const openDashboard = useCallback((route: string | null, state: any) => {
    track(`Opening dashboard to '/${route}'`, state)
    setCoordinationState(s => ({ ...s, isVisible: true, route, dashboardState: state }))
  }, [track])

  const closeDashboard = useCallback((state: any) => {
    track('Closing dashboard', state)
    // TODO: technically, when closing the dashboard we get into an unhandled loading state
    setCoordinationState(s => ({
      ...s,
      isVisible: false,
      widgetState: state,
      widgetKey: s.widgetKey + 1,
    }))
  }, [track])

  const iframe = useMemo(() => {
    const url = `${dashboardURL}/${coordinationState.route ?? ''}`
    const encodedState = coordinationState.dashboardState
      ? encode(coordinationState.dashboardState)
      : ''

    return (
      <iframe
        id={`${productSlug}-dashboard`}
        title={`${productName} Dashboard`}
        src={`${url}?token=${token}&state=${encodedState}&product=${productOverride}`}
        style={getDashboardStyle()}
      />
    )
  }, [
    dashboardURL,
    productSlug,
    productName,
    token,
    coordinationState,
    productOverride
  ])


  // TODO: On some old devices (and most mobile devices) the underneath dashboard shows
  // if the user scrolls up too fast
  return (
    <Context.Provider value={{
      openDashboard,
      closeDashboard,
      widgetState: coordinationState.widgetState,
      widgetKey: coordinationState.widgetKey,
    }}>
      {coordinationState.isVisible && iframe}
      {children}
    </Context.Provider>
  )
}


export const useDashboardLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Dashboard)')
  }

  return context
}

export default Dashboard
