import { BusinessDetails, BusinessDetailsV2 } from 'index'
import React, { useCallback, useContext, createContext } from 'react'
import { Style } from 'types'
import { ParafinProduct } from './types'

type TokenProps =
  | {
      token: string
    }
  | {
      getToken: () => Promise<string>
    }

export type ElementsProps = {
  onExit?: (metadata: any) => void
  onExitV2?: (metadata: any) => void
  onOptIn?: (businessId: string) => Promise<BusinessDetails | BusinessDetailsV2>
  handleOptIn?: () => Promise<BusinessDetails | BusinessDetailsV2>
  environment?: 'production' | 'development'
  style?: Partial<Style>
  previewConfig?: any
  variant?: string
  overrides?: any
  product: ParafinProduct
  externalBusinessId?: string
} & TokenProps

export type Children = { children: React.ReactNode }

type EntryLayerContext = {
  getToken: () => Promise<string>
  onExit: (metadata: any) => void
  onExitV2: (metadata: any) => void
  onOptIn:
    | ((businessId: string) => Promise<BusinessDetails | BusinessDetailsV2>)
    | null
  handleOptIn: (() => Promise<BusinessDetails | BusinessDetailsV2>) | null
  environment: 'production' | 'development'
  style: Partial<Style>
  previewConfig: any
  variant: string
  overrides: any
  productOverride: ParafinProduct
  externalBusinessId?: string
}

const Context = createContext<EntryLayerContext | undefined>(undefined)

const Entry = ({
  onExit,
  onExitV2,
  onOptIn,
  handleOptIn,
  environment,
  style,
  previewConfig,
  variant,
  overrides,
  product,
  externalBusinessId,
  children,
  ...props
}: ElementsProps & Children) => {
  const getTokenOpt = 'getToken' in props ? props.getToken : null
  const tokenOpt = 'token' in props ? props.token : null

  const getToken = useCallback(async () => {
    if (getTokenOpt) {
      return await getTokenOpt()
    } else {
      return tokenOpt ?? ''
    }
  }, [getTokenOpt, tokenOpt])

  return (
    <Context.Provider
      value={{
        getToken,
        onExit: (metadata: string) => onExit?.(metadata),
        onExitV2: (metadata: any) => onExitV2?.(metadata),
        onOptIn: onOptIn ?? null,
        handleOptIn: handleOptIn ?? null,
        environment:
          environment === 'production' ? 'production' : 'development',
        style: style ?? {},
        previewConfig,
        variant: variant ?? 'app',
        overrides: overrides ?? {},
        productOverride: product,
        externalBusinessId
      }}
    >
      {children}
    </Context.Provider>
  )
}

export const useEntryLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Entry)')
  }

  return context
}

export default Entry
