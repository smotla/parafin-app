import React, { useState, useCallback, useEffect, useContext, createContext } from 'react'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { originsMatch } from 'layers/comms/utils'


type Message = {
  message: string
  [key: string]: any
}
type HandlerKey = {
  origin: string
  message: string
}
type Handler = (message: Message) => void
type Registry = (HandlerKey & { fn: Handler })[]

type CommsLayerContext = {
  registerMessageHandler: (key: HandlerKey, handler: Handler) => void
  deregisterMessageHandler: (key: HandlerKey) => void
}
const Context = createContext<CommsLayerContext | undefined>(undefined)

type Children = { children: React.ReactNode }
const Comms = ({ children }: Children) => {
  const { track, report } = useAnalyticsLayerContext()

  const [registry, setRegistry] = useState<Registry>([])

  const registerMessageHandler = useCallback((key: HandlerKey, handler: Handler) => {
    track(`Registering message handler for ${key.message}`)
    setRegistry(registry => {
      const toOverride = registry.findIndex(
        h => originsMatch(h.origin, key.origin) && h.message === key.message
      )
      if (toOverride >= 0) {
        registry.splice(toOverride, 1, { ...key, fn: handler })
        return registry
      } else {
        return registry.concat([{ ...key, fn: handler }])
      }
    })
  }, [track])

  const deregisterMessageHandler = useCallback((key: HandlerKey) => {
    track(`Deregistering message handler for ${key.message}`)
    setRegistry(registry => {
      const toDelete = registry.findIndex(
        h => originsMatch(h.origin, key.origin) && h.message === key.message
      )
      if (toDelete >= 0) {
        registry.splice(toDelete, 1)
        return registry
      } else {
        return registry
      }
    })
  }, [track])

  const getRootOrigin = (input: string) => input.split('.').slice(-2).toString()

  const listener = useCallback(({ data, origin }: any) => {
    const handler = registry.find(h => (
      data?.message === 'exit'
        ? getRootOrigin(h.origin) === getRootOrigin(origin) && h.message === data?.message
        : originsMatch(h.origin, origin) && h.message === data?.message
    ))

    if (handler) {
      handler.fn(data)
    } else {
      if (registry.find(h => originsMatch(h.origin, origin))) {
        report(`[Comms] Unrecognized message: ${data?.message}`, { origin, data })
      }
    }
  }, [registry, report])

  useEffect(() => {
    track('Constructing event listener')
    window.addEventListener('message', listener, false)
    return () => {
      track('Deconstructing event listener')
      window.removeEventListener('message', listener)
    }
  }, [listener, track])

  return (
    <Context.Provider value={{
      registerMessageHandler,
      deregisterMessageHandler,
    }}>
      {children}
    </Context.Provider>
  )
}


export const useCommsLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Comms)')
  }

  return context
}

export default Comms
