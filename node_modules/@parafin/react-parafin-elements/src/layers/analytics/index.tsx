import React, { useCallback, useMemo, useEffect, useContext, createContext } from 'react'
import { BrowserClient, Hub, defaultStackParser, defaultIntegrations, makeFetchTransport } from '@sentry/browser'
import { useEntryLayerContext } from 'layers/entry'
import createAnalytics from 'layers/analytics/utils'
import Observer from 'layers/analytics/observer'

declare global { interface Window { parafinAnalytics: any } }

type AnalyticsLayerContext = {
  track: (event: string, metadata?: any) => void
  report: (error: string, metadata?: any) => void
  identify: (userId: string) => void
}

const Context = createContext<AnalyticsLayerContext | undefined>(undefined)

type Children = { children: React.ReactNode }
const Analytics = ({ children }: Children) => {
  const { environment } = useEntryLayerContext()
  const client = useMemo(() => new BrowserClient({
    dsn: 'https://573c8fbfe50e44df96a3efc652f6cff5@o496091.ingest.sentry.io/5934342',
    transport: makeFetchTransport,
    stackParser: defaultStackParser,
    integrations: defaultIntegrations,
    environment,
  }), []) // eslint-disable-line react-hooks/exhaustive-deps
  
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const hub = useMemo(() => new Hub(client), []);

  useEffect(() => {
    // Set up Segment
    !window.parafinAnalytics && createAnalytics(environment)
  }, [environment])

  useEffect(() => {
    // Set up Sentry hub
    hub.configureScope(scope => {
      // Sentry doesn't like overriding the environment prop passed to init
      scope.setTag('clientEnvironment', environment)
    })
  }, [environment, hub])

  const capture = useCallback((error: string, metadata?: any) => {
    const metadataObj = typeof metadata === 'string' ? { value: metadata } : metadata
    hub.pushScope()
    hub.configureScope(scope => {
      scope.setContext('metadata', metadataObj)
    })
    hub.captureException(new Error(error))
    hub.popScope()
  }, [hub])

  const identify = useCallback((userId: string) => {
    try {
      window.parafinAnalytics!.identify(userId)
      hub.configureScope(scope => {
        scope.setUser({ id: userId })
      })
    } catch (err: any) {
      capture(`[Analytics] Identification error - ${err?.message ?? 'Unknown error'}`)
    }
  }, [capture, hub])

  const track = useCallback((event: string, data?: any) => {
    try {
      window.parafinAnalytics!.track(event, data)
    } catch (err: any) {
      capture(`[Analytics] Tracking error - ${err?.message ?? 'Unknown error'}`)
    }
  }, [capture])

  const report = useCallback((error: string, metadata?: any) => {
    try {
      track(error, metadata)
      capture(error, metadata)
    } catch (err: any) {
      capture(`[Analytics] Reporting error - ${err?.message ?? 'Unknown error'}`)
    }
  }, [track, capture])

  useEffect(() => track('Initializing elements'), [track])


  return (
    <Context.Provider value={{
      track,
      report,
      identify,
    }}>
      <Observer
        onEnter={() => track('Elements is visible')}
        onLeave={() => track('Elements is not visible')}
        onError={report}
      >
        {children}
      </Observer>
    </Context.Provider>
  )
}


export const useAnalyticsLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Analytics)')
  }

  return context
}

export default Analytics
