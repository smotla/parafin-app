import React, { useEffect, useRef } from 'react'


type ObserverProps = {
  onEnter: () => void
  onLeave: () => void
  onError: (error: string, metadata?: object) => void
  children: React.ReactNode
}

const Observer = ({ onEnter, onLeave, onError, children }: ObserverProps) => {
  const containerRef = useRef<HTMLDivElement | null>(null)

  useEffect(() => {
    if (containerRef.current) {
      try {
        const impress = ([entry]: any) => {
          if (entry?.isIntersecting === true) {
            onEnter()
          } else if (entry?.isIntersecting === false) {
            onLeave()
          } else {
            onError('[Analytics] Unexpected observer state', { value: entry?.isIntersecting })
          }
        }

        const observer = new IntersectionObserver(impress)
        observer.observe(containerRef.current)
        return () => { observer.disconnect() }
      } catch (err: any) {
        onError(`[Analytics] ${err?.message ?? 'Unknown observer error'}`)
      }
    }
  }, [containerRef, onEnter, onLeave, onError])

  return (
    <div ref={containerRef}>
      {children}
    </div>
  )
}

export default Observer
