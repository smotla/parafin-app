import React, { useState, useEffect, useContext, createContext } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import LoadingUI from 'layers/states/components/Loading'
import ErrorUI from 'layers/states/components/Error'


export type State = 'loading' | 'error' | 'ready'
type StatesLayerContext = {
  setState: (state: State) => void
}

const Context = createContext<StatesLayerContext | undefined>(undefined)

type Children = { children: React.ReactNode }
const States = ({ children }: Children) => {
  const { style, variant } = useEntryLayerContext()

  const [state, setState] = useState<State>('loading')


  return (
    <Context.Provider value={{setState}}>
      {state === 'loading' && <LoadingUI style={style} variant={variant} />}
      {state === 'error' && <ErrorUI style={style} variant={variant} />}
      <div style={{ display: state === 'ready' ? 'block' : 'none' }}>
        {children}
      </div>
    </Context.Provider>
  )
}


export const useStatesLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (States)')
  }

  return context
}

export const LoadingState = () => <></>
export const ErrorState = () => {
  const { setState } = useStatesLayerContext()
  useEffect(() => setState('error'), [setState])
  return <></>
}

export default States
