import React, { useRef, useState, useEffect } from 'react'
import ContentLoader from 'react-content-loader'
import { Style } from 'types'
import { hexToRGBA } from 'utils'
import Spinner from './components/Spinner'
import { BorderStylesConfigDefaultBackup } from 'layers/style'
import { ParafinLogo } from './ParafinLogo'

const DefaultLoading = () => {
  const loadingRef = useRef<HTMLDivElement>(null)
  const [loadingWidth, setLoadingWidth] = useState(0)

  useEffect(() => {
    const updateWidth = () => {
      setLoadingWidth(loadingRef.current?.offsetWidth ?? 0)
    }

    updateWidth()
    window.addEventListener('resize', updateWidth)

    return () => window.removeEventListener('resize', updateWidth)
  }, [])

  return (
    <div
      ref={loadingRef}
      style={{
        border: `1px solid ${BorderStylesConfigDefaultBackup.border_color}`,
        borderRadius: BorderStylesConfigDefaultBackup.border_radius,
        overflow: 'hidden'
      }}
    >
      <div
        style={{
          height: '160px',
          width: '100%',
          padding: loadingWidth <= 480 ? '24px' : '40px',
          backgroundColor: '#FFFFFF'
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <div style={{ flexBasis: '401px' }}>
            <ContentLoader
              speed={2}
              width="100%"
              height={80}
              backgroundColor="#f3f3f3"
              foregroundColor="#ecebeb"
              uniqueKey="loading-shimmer-left"
            >
              <rect x="0" y="0" rx="4" ry="4" width="59.35%" height="16" />
              <rect x="0" y="32" rx="4" ry="4" width="24.94%" height="16" />
              <rect x="0" y="64" rx="4" ry="4" width="100%" height="16" />
            </ContentLoader>
          </div>
          <div
            style={{
              flexBasis: '227px',
              display: loadingWidth <= 768 ? 'none' : 'block'
            }}
          >
            <ContentLoader
              speed={2}
              width={'100%'}
              height={40}
              backgroundColor="#f3f3f3"
              foregroundColor="#ecebeb"
              uniqueKey="loading-shimmer-right"
            >
              <rect x="0" y="0" rx="4" ry="4" width="100%" height="16" />
              <rect x="117" y="24" rx="4" ry="4" width="48.46%" height="16" />
            </ContentLoader>
          </div>
        </div>
      </div>
      <div
        style={{
          width: '100%',
          display: 'flex',
          padding: loadingWidth <= 900 ? '12px 24px' : '12px 40px',
          background: '#FAFAFA'
        }}
      >
        <ParafinLogo />
      </div>
    </div>
  )
}

type Props = { style: Partial<Style> }
const ButtonLoading = ({ style }: Props) => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center' }}>
      <button
        style={{
          position: 'relative',
          background: hexToRGBA(
            style.variants?.button?.background ?? '#797979',
            0.5
          ),
          color: style.variants?.button?.color ?? '#fff',
          fontSize: style.variants?.button?.fontSize ?? '14px',
          borderRadius: style.variants?.button?.borderRadius ?? '8px',
          minHeight: style.variants?.button?.height ?? '40px',
          cursor: 'not-allowed',
          // TODO: having a "width: fit-content" sort of breaks the widget spec
          width: 'fit-content',
          padding: '0 24px',
          border: 'none',
          transition: '0.2s',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          textShadow: 'none',
          fontFamily: 'inherit',
          fontWeight: 600
        }}
        disabled
      >
        <div
          style={{
            position: 'absolute',
            top: '0px',
            right: '0px',
            bottom: '0px',
            left: '0px',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          <Spinner />
        </div>
        <span style={{ visibility: 'hidden' }}>View my offer</span>
      </button>
    </div>
  )
}

type LoadingProps = {
  variant: string
  style: Partial<Style>
}
const Loading = ({ variant, style }: LoadingProps) => {
  switch (variant) {
    case 'button':
      return <ButtonLoading style={style} />
    default:
      return <DefaultLoading />
  }
}

export default Loading
