import React, { useCallback, useContext, createContext } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { LoadingState } from 'layers/states'
import { useTokenLayerContext } from 'layers/token'
import useSimpleFetcher from 'hooks/useSimpleFetcher'
import { getEnvironmentChunk } from 'layers/product/utils'
import { BorderStylesConfig } from './types'

export const BorderStylesConfigDefaultBackup = {
  border_radius: '16px',
  border_color: '#E8E8E8'
}

const getWidgetConfig = async (
  env: 'development' | 'production',
  token: string
): Promise<any> => {
  const baseURL = `https://api${getEnvironmentChunk(env)}.parafin.com`

  const response = await fetch(`${baseURL}/partner/widget_configs`, {
    headers: { authorization: `Bearer ${token}` }
  })

  return response.json()
}

const Context = createContext<BorderStylesConfig | undefined>(undefined)

type Children = { children: React.ReactNode }
const Style = ({ children }: Children) => {
  const { environment, previewConfig } = useEntryLayerContext()
  const { token } = useTokenLayerContext()

  const widgetConfigFetchFn = useCallback(
    async () =>
      previewConfig
        ? BorderStylesConfigDefaultBackup
        : await getWidgetConfig(environment, token),
    [environment, token, previewConfig]
  )
  const widgetConfigQuery = useSimpleFetcher(widgetConfigFetchFn)

  if (widgetConfigQuery.state === 'loading') return <LoadingState />

  const widgetConfig = widgetConfigQuery.value
  const borderStyles = {
    border_radius:
      (previewConfig?.border_radius ?? widgetConfig?.border_radius.value) ||
      widgetConfig?.border_radius.default_value ||
      BorderStylesConfigDefaultBackup.border_radius,
    border_color:
      (previewConfig?.border_color ?? widgetConfig?.border_color.value) ||
      widgetConfig?.border_color.default_value ||
      BorderStylesConfigDefaultBackup.border_color
  }

  return <Context.Provider value={borderStyles}>{children}</Context.Provider>
}

export const useStyleLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Style)')
  }

  return context
}

export default Style
