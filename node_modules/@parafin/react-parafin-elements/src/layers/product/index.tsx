import React, { useCallback, useEffect, useContext, createContext } from 'react'
import { useEntryLayerContext } from 'layers/entry'
import { LoadingState } from 'layers/states'
import { useAnalyticsLayerContext } from 'layers/analytics'
import { useTokenLayerContext } from 'layers/token'
import { getDefaultProduct, getProduct } from 'layers/product/utils'
import { Product as ProductType } from 'layers/product/types'
import useSimpleFetcher from 'hooks/useSimpleFetcher'

type ProductLayerContext = ProductType
const Context = createContext<ProductLayerContext | undefined>(undefined)

type Children = { children: React.ReactNode }
const Product = ({ children }: Children) => {
  const { environment, variant, overrides, productOverride, previewConfig } =
    useEntryLayerContext()
  const { report, track } = useAnalyticsLayerContext()
  const { token } = useTokenLayerContext()

  const productFetchFn = useCallback(async () => {
    const start = +new Date()
    const product = await getProduct(
      environment,
      token,
      productOverride,
      !!previewConfig
    )
    track('Completed product fetch', { elapsed: `${+new Date() - start}ms` })
    return product
  }, [environment, token, track, productOverride, previewConfig])

  const productQuery = useSimpleFetcher(productFetchFn, { timeout: 50000 })

  const product = {
    ...getDefaultProduct(environment, variant),
    ...productQuery.value,
    ...overrides.__PRODUCT__
  }

  useEffect(() => {
    if (
      productQuery.state === 'ready' &&
      (!productQuery.value ||
        !productQuery.value.widgetURL ||
        !productQuery.value.dashboardURL ||
        !productQuery.value.productSlug ||
        !productQuery.value.productName)
    ) {
      report('[Product] Schema error', { product: productQuery.value })
    }

    if (productQuery.state === 'error') {
      report(
        `[Product] Error during fetch - ${
          productQuery.error ?? 'Unknown error'
        }`
      )
    }
  }, [productQuery, report])

  if (productQuery.state === 'loading') return <LoadingState />

  return <Context.Provider value={product}>{children}</Context.Provider>
}

export const useProductLayerContext = () => {
  const context = useContext(Context)

  if (context === undefined) {
    throw new Error('Unexpected context error (Product)')
  }

  return context
}

export default Product
